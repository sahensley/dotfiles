# .bashrc
# vim: fdm=marker

#{{{ Variable setup - Bash setup and internal
# Bash setup
HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize
PROMPT_DIRTRIM=2

# Used for other commands in .bashrc
hostname_short=$(hostname --short 2> /dev/null)
#}}}

# {{{ Variable setup - other
export PIP_REQUIRE_VIRTUALENV=true
#}}}

# Check for interative mode, return if not interactive
[[ $- = *i* ]] || return


# {{{ Source global and host specific bashrc files
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Configure host specific settings
if [ -f "${HOME}/.bashrc_${hostname_short}" ]
then
    source "${HOME}/.bashrc_${hostname_short}"
fi
#}}}

#{{{ $PATH setup
# Add .local/bin to path if it isn't already there
if ! [[ "${PATH}" =~ "${HOME}/.local/bin:" ]]
then
    PATH="${HOME}/.local/bin:${PATH}"
fi
export PATH
#}}}

#{{{ Functions
# Deletes branch from remote host (Github, Gitlab, etc..)
,git-delete-remote-branch () {
    git push origin --delete "${1}"

}

# Updates fork with upstream default branch - runs as a subshell
,git-update-fork() {
  (
    default_branch=$(git remote show upstream|grep 'HEAD branch'|cut -d' ' -f5)
    git checkout $default_branch
    git fetch upstream
    git merge upstream/$default_branch
    git push
    git checkout -
  )
}
#}}}

#{{{ Aliases
alias ,set-requests-ca-bundle='export REQUESTS_CA_BUNDLE="/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt"'
alias ,unset-requests-ca-bundle='unset REQUESTS_CA_BUNDLE'
alias ,set-xdg-runtime-dir='export XDG_RUNTIME_DIR="/run/user/$(id -u)"'
alias ,unset-pip-require-virtualenv='unset PIP_REQUIRE_VIRTUALENV'
alias gitrefgraph='git log --graph --oneline --decorate --reflog'
alias docker='podman'
alias dbox='distrobox'
#}}}

# {{{ Bash prompt and related helper functions
################################### bash_prompt ################################
# Bash prompt from here: https://stackoverflow.com/a/23410110
# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository () {
    git branch > /dev/null 2>&1
}

function set_git_branch () {
    # Set the final branch string
    BRANCH=`parse_git_branch`
}

# get current branch in git repo
function parse_git_branch () {
    BRANCH=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=$(parse_git_dirty)
        echo "[${BRANCH}${STAT}]"
    else
        echo ""
    fi
}

# get current status of git repo
function parse_git_dirty() {
    bits=''
    status=$(git status 2>&1 | tee)

    renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi

    ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi

    newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi

    untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi

    deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi

    dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi

    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="\$"
    else
        PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
    fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
    if test -z "${VIRTUAL_ENV}" ; then
        PYTHON_VIRTUALENV=""
    else
        PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
    fi
}

# Set the full bash prompt.
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # Set the PYTHON_VIRTUALENV variable.
    set_virtualenv

    # Set the BRANCH variable.
    if [ -z $PROMPT_NO_GIT ] && is_git_repository ; then
        set_git_branch
    else
        BRANCH=''
    fi

    # Set the bash prompt variable. If SSH'd, include the host.
    if [ -n "$SSH_TTY" ]; then
        PS1="${PYTHON_VIRTUALENV}${YELLOW}\u@\h:\w${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
    elif [ -n "$DISTROBOX_ENTER_PATH" ] || [ -f "/run/.toolboxenv" ]; then
        PS1="ðŸ§°${PYTHON_VIRTUALENV}${YELLOW}\u:\w${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
    else
        PS1="${PYTHON_VIRTUALENV}${YELLOW}\u:\w${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
    fi
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
#}}}

#{{{ asdf version manager - placement is picky, put at the bottom of bashrc
if [ -d "${HOME}/.asdf" ]; then
    # https://github.com/asdf-community/asdf-direnv#pro-tips
    # ASDF is setup to use direnv.  We don't need the shims in our path
    # All shims are still available via asdf exec <shim>
    # To return to default behavior, uncomment the `asdf.sh` line below
    # source "${HOME}/.asdf/asdf.sh"
    export PATH="${HOME}/.asdf/bin:${PATH}"
    source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/bashrc"
    if [ ! -f "${HOME}/.config/bash/no_asdf_autocomplete" ]; then
        source $HOME/.asdf/completions/asdf.bash
    fi
fi
#}}}

