# .bashrc

HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize
PROMPT_DIRTRIM=2

# Check for interative mode, return if not interactive
[[ $- = *i* ]] || return

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Configure host specific settings
if [ -f ".bashrc_$(hostname --short)" ]
then
    source .bashrc_$(hostname --short)
fi

# User specific environment
if ! [[ "${PATH}" =~ "${HOME}/.local/bin:" ]]
then
    PATH="${HOME}/.local/bin:${PATH}"
fi

# Node setup
NPM_PACKAGES="${HOME}/.local/npm-packages"
if ! [[ "${NODE_PATH}" =~ "${NPM_PACKAGES}/lib/node_modules:" ]]
then
    NODE_PATH="${NPM_PACKAGES}/lib/node_modules:${NODE_PATH}"
fi
export NODE_PATH

# Node bin path setup
if ! [[ "${PATH}" =~ "${NPM_PACKAGES}/bin:" ]]
then
    PATH="${NPM_PACKAGES}/bin:${PATH}"
fi

# Node global bin path setup
NPM_GLOBAL_PACKAGES="${HOME}/.local/lib/node/npm-packages"
if ! [[ "${PATH}" =~ "${NPM_GLOBAL_PACKAGES}/bin:" ]]
then
    PATH="${NPM_GLOBAL_PACKAGES}/bin:${PATH}"
fi

if [ -d "${HOME}/.asdf" ]; then
    . "${HOME}/.asdf/asdf.sh"
fi

export PATH

# Bash prompt from here: https://stackoverflow.com/a/23410110
# bash_prompt
# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository () {
    git branch > /dev/null 2>&1
}

function set_git_branch () {
    # Set the final branch string
    BRANCH=`parse_git_branch`
}

# get current branch in git repo
function parse_git_branch () {
    BRANCH=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=$(parse_git_dirty)
        echo "[${BRANCH}${STAT}]"
    else
        echo ""
    fi
}

# get current status of git repo
function parse_git_dirty() {
    bits=''
    status=$(git status 2>&1 | tee)

    renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi

    ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi

    newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi

    untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi

    deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi

    dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi

    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="\$"
    else
        PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
    fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
    if test -z "${VIRTUAL_ENV}" ; then
        PYTHON_VIRTUALENV=""
    else
        PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
    fi
}

# Set the full bash prompt.
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # Set the PYTHON_VIRTUALENV variable.
    set_virtualenv

    # Set the BRANCH variable.
    if is_git_repository ; then
        set_git_branch
    else
        BRANCH=''
    fi

    # Set the bash prompt variable. If SSH'd, include the host.
    if [ -n "$SSH_TTY" ]; then
        PS1="${PYTHON_VIRTUALENV}${YELLOW}\u@\h:\w${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
    else
        PS1="${PYTHON_VIRTUALENV}${YELLOW}\u:\w${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
    fi
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
